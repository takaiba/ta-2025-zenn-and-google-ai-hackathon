---
description: プルリクエストの作成に関するルール
globs: 
alwaysApply: false
---
# プルリクエストの作成順序
- 必ず上から順番に確認、実行していくこと
- 順序を絶対に飛ばしたりしないこと

# featureブランチの確認
- 下記のコマンドで現在チェックアウトしているブランチ名を取得する
```bash
git branch --show-current
```
- ブランチ名に`feature/`がついている場合は、既にfeatureブランチが作成済みなので特に何もしない
- ブランチ名に`feature/`がついていない場合は、以下のコマンドでfeatureブランチを作成する
```bash
git checkout -b feature/$(date '+%Y%m%d%H%M%S') origin/release
```

# コミット状態の確認
- 以下のコマンドを実行して、ステージされている変更が無いことと、すべてコミットされた状態かどうか確認する
```bash
git status
```
- もし変更が残っていれば以下のコマンドを実行する
```bash
git add . && \
git diff --cached | cat && \
git commit -m "{{diffで読み取った内容を要約}}"
```

# コード差分の確認
- 下記のコマンドでコード差分を確認し、記憶に留めておくこと
```bash
git diff origin/release HEAD | cat
```

# プルリクエストタイトルの作成
- コード差分から適切な内容で書く
- もしタスクIDが提供されている場合は、{{PRタイトル}}の先頭にタスクIDを追加する。`[タスクID] プルリクエストタイトル文`のようなフォーマットにすること。また、タスクIDが提供されていない場合はこの部分を省略する
- タスクIDが提供されている場合のフォーマット
```
[タスクID] プルリクエストタイトル文
```
- タスクIDが提供されてない場合のフォーマット
```
プルリクエストタイトル文
```

# プルリクエスト本文の作成
- コード差分から適切な内容で書く
- 各項目は箇条書きで書く
- 必要な情報を漏れなく記載する
- フォーマットは下記
```markdown
## 概要

## 変更内容

## 考えられるリスク

## 動作確認事項
```

# プルリクエスト本文を1行に変換
- 本文に特殊文字（バッククォート`\`、ドルマーク`$`、バックスラッシュ`\`など）が含まれる場合は、バックスラッシュ`\`でエスケープする
- 本文の改行を`\n`に置き換えて1行に変換する

# プルリクエスト本文を一時ファイルに格納
- 本文を格納しておく一時ファイルを作成する
```bash
BODY_FILE=$(mktemp)
```
- 1行にした本文を一時ファイルに展開して格納する
```bash
echo -e "{{1行に変換した本文}}" > "${BODY_FILE}"
```

# プルリクエスト作成処理の実行
- 各コマンドが成功した場合にのみ次に進む。
- 以下の実行結果が正しく出力されているか必ず確認すること。稀に正しく実行できていないことがあるため。正しく実行できていない場合は、コマンドを修正することで、実行するようにしてください。また、修正する場合も作成したPRタイトル、説明が正しく作られるようにしてください。
```bash
git push -u origin HEAD && \
git branch --set-upstream-to=origin/$(git branch --show-current) $(git branch --show-current) && \
gh pr create --title "{{プルリクエストタイトル}}" --body-file "${BODY_FILE}" && \
gh pr view --web "$(git branch --show-current)" && \
if [ -f "${BODY_FILE}" ]; then rm "${BODY_FILE}"; fi
```


