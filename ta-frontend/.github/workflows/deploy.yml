name: build and deploy on gke
on:
  workflow_call:
    inputs:
      WORKLOAD_IDENTITY_PROVIDER:
        description: "The workload identity provider to use"
        required: true
        type: string
      SERVICE_ACCOUNT:
        description: "The service account to use"
        required: true
        type: string
      GAR_LOCATION:
        description: "The location of the Google Artifact Registry"
        required: true
        type: string
      PROJECT_ID:
        description: "The project ID"
        required: true
        type: string
      REPOSITORY:
        description: "The repository name"
        required: true
        type: string
      IMAGE:
        description: "The image name"
        required: true
        type: string
      GKE_CLUSTER:
        description: "The GKE cluster name"
        required: true
        type: string
      GKE_ZONE:
        description: "The GKE cluster zone"
        required: true
        type: string
      DEPLOY_ENV:
        description: "The deployment environment"
        required: true
        type: string
      DEPLOYMENT_NAME:
        description: "The deployment name"
        required: true
        type: string
      NAMESPACE:
        description: "The namespace"
        required: true
        type: string

concurrency:
  group: deploy-${{ inputs.GKE_CLUSTER }}-${{ inputs.DEPLOY_ENV }}
  cancel-in-progress: false

jobs:
  Deploying:
    timeout-minutes: 30
    runs-on: self-hosted

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ inputs.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.SERVICE_ACCOUNT }}
          audience: "https://github.com/takaiba"

      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://${{ inputs.GAR_LOCATION }}-docker.pkg.dev

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ inputs.GKE_CLUSTER }}
          location: ${{ inputs.GKE_ZONE }}

      - name: Set up Kustomize
        working-directory: k8s-migrate/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          curl -sfL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.3/kustomize_v5.0.3_linux_amd64.tar.gz | tar xz
          chmod u+x ./kustomize
          mv ./kustomize /usr/local/bin

      # Set up argo cli
      - name: Apply k8s-dependencies RBAC
        working-directory: k8s-dependencies/overlayes/ta/${{inputs.DEPLOY_ENV}}
        run: |-
          /usr/local/bin/kustomize build .
          /usr/local/bin/kustomize build . | kubectl apply -f -

      # Set up argo cli
      - name: Apply k8s-dependencies
        working-directory: k8s-dependencies
        run: |-
          /usr/local/bin/kustomize build .
          /usr/local/bin/kustomize build . | kubectl apply -f -

      # Set up argo cli for exec-query-postgres
      - name: Set up argo for exec-query-postgres
        working-directory: k8s-exec-query-postgres/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.4.9/argo-linux-amd64.gz
          gunzip argo-linux-amd64.gz
          chmod +x argo-linux-amd64
          mv argo-linux-amd64 argo

      # Execute query on Postgres
      - name: Exec Query Deploy
        working-directory: k8s-exec-query-postgres/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          # 不要なジョブを削除
          kubectl -n ${{ inputs.NAMESPACE }} delete wf --all

          /usr/local/bin/kustomize edit set namesuffix -- -${{ github.sha }}
          /usr/local/bin/kustomize build .
          /usr/local/bin/kustomize build . | kubectl apply -f -
          # WFリソースが完了するまで待機、失敗したらexit 1される。
          ./argo wait -n ${{ inputs.NAMESPACE }} ta-exec-query-postgres-${{ github.sha }}

      # 失敗の有無に関わらず以下のジョブを実行する
      - name: Show Exec Query Logs
        if: always()
        working-directory: k8s-exec-query-postgres/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          # ジョブが完了したらコンテナのログを表示させる
          ./argo logs -n ${{ inputs.NAMESPACE }} ta-exec-query-postgres-${{ github.sha }}
          ./argo get -n ${{ inputs.NAMESPACE }} -o wide ta-exec-query-postgres-${{ github.sha }}

      # Set up argo cli
      - name: Set up argo
        working-directory: k8s-migrate/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.4.9/argo-linux-amd64.gz
          gunzip argo-linux-amd64.gz
          chmod +x argo-linux-amd64
          mv argo-linux-amd64 argo

      # マイグレーションの実行
      - name: Migrate Deploy
        working-directory: k8s-migrate/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          # 不要なジョブを削除
          kubectl -n ${{ inputs.NAMESPACE }} delete wf --all

          /usr/local/bin/kustomize edit set image image=${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/${{ inputs.REPOSITORY }}/${{ inputs.IMAGE }}-migrate:$GITHUB_SHA
          /usr/local/bin/kustomize edit set namesuffix -- -${{ github.sha }}
          /usr/local/bin/kustomize build .
          /usr/local/bin/kustomize build . | kubectl apply -f -
          # WFリソースが完了するまで待機、失敗したらexit 1される。
          ./argo wait -n ${{ inputs.NAMESPACE }} ta-migrate-${{ github.sha }}

      # 失敗の有無に関わらず以下のジョブを実行する
      - name: Show Migration Logs
        if: always()
        working-directory: k8s-migrate/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          # ジョブが完了したらコンテナのログを表示させる
          ./argo logs -n ${{ inputs.NAMESPACE }} ta-migrate-${{ github.sha }}
          ./argo get -n ${{ inputs.NAMESPACE }} -o wide ta-migrate-${{ github.sha }}

      - name: Set up Kustomize
        working-directory: k8s/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          curl -sfL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.3/kustomize_v5.0.3_linux_amd64.tar.gz | tar xz
          chmod u+x ./kustomize

      - name: App Deploy
        working-directory: k8s/overlayes/${{inputs.DEPLOY_ENV}}
        run: |-
          ./kustomize edit set image image=${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/${{ inputs.REPOSITORY }}/${{ inputs.IMAGE }}:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/${{ inputs.DEPLOYMENT_NAME}} -n ${{ inputs.NAMESPACE }}
          kubectl get services -o wide -n ${{ inputs.NAMESPACE }}
